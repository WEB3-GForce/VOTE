import sys

LISP_CLASS = "defclass"
LISP_CLASS_END = "defpredicate"
LISP_DOC = ":documentation"
LISP_ACCESSOR = ":accessor"


def parseClass(file_name, output_file_directory):

    """    
        This is a simple file parser for translating lisp object-oriented classes.
        Namely, it:
        
            - Creates a new python class with the same name as the lisp class
            - Creates an __init__ function with all the respective instance
              variables
            - Adds the lisp documentation.
        
        The parse only handles files in the following canonical format:
        
        (defclass dd ()
                ((instance_name1  :initform nil :documentation "some string" :accessor some_accessor)
                 (instance_name2  :initform nil :documentation "some string" :accessor some_accessor)
                 ...
          (:documentation "documentation for class"))
    """

    print "File Name: " + file_name

    file_object = open(file_name, 'r')
    output = "from printable_object import PrintableObject\n"
    output += "\n\"\"\"\nFile Generated by Lisp2Python Translator\n\"\"\"\n\n"
    
    class_name = ""
    init_doc = ""
    parameters = ["self"]
    
    with open(file_name, 'r') as openfileobject:
        
        for line in openfileobject:

            print line        
            line_parsed = line.replace('(', '').replace(')', '').lstrip()
                
            if line.count(LISP_CLASS):
         
                class_name = line_parsed.split(' ')[1].capitalize()
        
                output += "class %s(PrintableObject):\n" % (class_name)
                output += "\n    \"\"\"\"\n    Add documentation here.\n    \"\"\"\n\n"            
                init_doc = "        \"\"\"\n        Constructs a new %s object.\n\n" % (class_name)

            elif line.count(LISP_CLASS_END) or line_parsed.split(" ")[0] == LISP_DOC :
                break
            
            elif line.count('('):
            
                line_list = line_parsed.split(' ')
                
                doc_start = line_parsed.find(LISP_DOC) + len(LISP_DOC) + 2
                doc_end = line_parsed.find(LISP_ACCESSOR) - 2
            
                variable_name = line_list[0].replace("-", "_")
                documentation = line_parsed[doc_start:doc_end]
            
                parameters.append(variable_name)
                init_doc += "        %s         -- %s\n" % (variable_name, documentation)
            
    output += "    def __init__(%s):\n\n" %(", ".join(parameters))
    output += init_doc + "\n        return -- returns nothing\n        \"\"\"\n"
    
    parameters = parameters[1:]
    
    for param in parameters:
    
        output += "        self.%s = %s\n" % (param, param)
    
    output += "\n\n"
    
    output_file = open(output_file_directory + "/" + class_name.lower() + ".py", "w")
    output_file.write(output)
    
    output_file.close()
    file_object.close()

"""
    To call this program:
    
        python lisp2python.py file_to_translate output_directory
"""
if __name__ == "__main__":
    parseClass(sys.argv[1], sys.argv[2])
