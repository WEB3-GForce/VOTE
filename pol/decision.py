from printable_object import PrintableObject

"""
File Generated by Lisp2Python Translator
"""

class Decision(PrintableObject):

    """"
    An object for storing decisions on a bill.
    """

    def __init__(self, for_stances, agn_stances, neg_for_stances, neg_agn_stances,
                 con_rel_for_stances, con_rel_agn_stances, no_update,
                 number_for, number_agn, group_for, group_agn, for_norms,
                 agn_norms, for_bnorms, agn_bnorms, split_group, split_record,
                 split_credo, MI_stance, MI_group, MI_credo, MI_record, MI_norm,
                 strategy, result, reason, downside, downside_record,
                 deeper_analysis, real_vote, score):

        """
        Constructs a new Decision object.

        for_stances         -- list of stances in favor
        agn_stances         -- list of stances opposed
        neg_for_stances     -- list of flip stances in favor
        neg_agn_stances     -- list of flip stances opposed
        con_rel_for_stances -- list of stances in favor by opposition
        con_rel_agn_stances -- list of stances opposed by opposition
        no_update           -- T until update-decision-metrics done
        number_for          -- number of reasons for
        number_agn          -- number of reasons agn
        group_for           -- list of groups in support
        group_agn           -- list of groups opposed
        for_norms           -- norms associated with for stances
        agn_norms           -- norms associated with agn stances
        for_bnorms          -- norms associated with bill's for stances
        agn_bnorms          -- norms associated with bill's agn stances
        split_group         -- list of groups on both sides
        split_record        -- t/nil if voting record is split
        split_credo         -- t/nil if own credo is split
        MI_stance           -- for/agn/nil -- >important? for agn
        MI_group            -- for/agn/nil
        MI_credo            -- for/agn/nil
        MI_record           -- for/agn/nil
        MI_norm             -- for/agn/nil
        strategy            -- decision strategy used to arrive at result
        result              -- for/agn -- position arrived at
        reason              -- support for position
        downside            -- negative aspects of decision
        downside_record     -- voting record stances supporting downside
        deeper_analysis     -- set by deeper-analysis strategy
        real_vote           -- actual vote for test bills
        score               -- accuracy of predicted vote

        return              -- returns nothing
        """
        self.isa_depth = isa_depth
        self.sort_key = sort_key
        self.bill = bill
        self.member = member
        self.for_stances = for_stances
        self.agn_stances = agn_stances
        self.neg_for_stances = neg_for_stances
        self.neg_agn_stances = neg_agn_stances
        self.con_rel_for_stances = con_rel_for_stances
        self.con_rel_agn_stances = con_rel_agn_stances
        self.no_update = no_update
        self.number_for = number_for
        self.number_agn = number_agn
        self.group_for = group_for
        self.group_agn = group_agn
        self.for_norms = for_norms
        self.agn_norms = agn_norms
        self.for_bnorms = for_bnorms
        self.agn_bnorms = agn_bnorms
        self.split_group = split_group
        self.split_record = split_record
        self.split_credo = split_credo
        self.MI_stance = MI_stance
        self.MI_group = MI_group
        self.MI_credo = MI_credo
        self.MI_record = MI_record
        self.MI_norm = MI_norm
        self.strategy = strategy
        self.result = result
        self.reason = reason
        self.downside = downside
        self.downside_record = downside_record
        self.deeper_analysis = deeper_analysis
        self.real_vote = real_vote
        self.score = score


def collect_groups(stances)
    return collect_source_type("GROUP", stances)

def collect_credo(stances)
    return collect_source_type("MEMBER", stances)

def collect_bills(stances)
    return collect_source_type("BILL", stances)

def collect_source_type(db, stances)
    filter_fun = lambda stance : stance.source_db == db
    return filter(filter_fun, stances)
