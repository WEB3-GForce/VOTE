from printable_object import PrintableObject

"""
File Generated by Lisp2Python Translator
"""

class Stance(PrintableObject):

    """"
    A class that represents a particular stance.
    """

    def __init__(self, source, source_db, source_structure, relation, issue,
                 issue_structure, importance, side, sort_key, siblings):

        """
        Constructs a new Stance object.

        source            -- particular instance of member, bill, issue, group
        source_db         -- db of source" 
        source_structure  -- ?" 
        relation          -- ?" 
        issue             -- stance issue" 
        issue_structure   -- ?" 
        importance        -- stance importance A, B, C, D" 
        side              -- stance side pro or con" 
        sort_key          -- ?" 
        siblings          -- related stances must be stance-alikev?

        return            -- returns nothing
        """
        self.source = source
        self.source_db = source_db
        self.source_structure = source_structure
        self.relation = relation
        self.issue = issue
        self.issue_structure = issue_structure
        self.importance = importance
        self.side = side
        self.sort_key = sort_key
        self.siblings = siblings

    def sort_key(self):
        return self.stance_sort_key or self.importance

    def set_sort_key(self, keyword):
        stance_import = self.importance
        rel_import = "B"
        if self.relation:
            rel_import = DBRelation.GetById(self.relation).importance
        
        #Lisp made the lists one string. Since python can
        #perform comparisons over lists, it was left as is.
        if keyword == "LOYALTY":
            self.sort_key = (rel_import, stance_import)
        elif keyword == "EQUITY":
            self.sort_key = (stance_import, rel_import)
        elif keyword == "IMPSIDE":
            self.sort_key = (stance_import, self.side)
        # Support alpha later
        #elif keyword == "ALPHA":
        #    self.sort_key = (issue, stance_import, rel_import
        else:
            print "ERROR: Unknown keyword: %s" % keyword
    
    def match?(self, stance2):
        # The lisp uses a match? on the issue. Unsure what does
        match_issue = self.issue == stance2.issue
        match_side = self.side == stance2.side
        match_import = self.importance == stance2.importance
        
        if match_issue and match_side and match_import:
            # Complete match
            return stance2
        elif match_issue and match_side:
            # Partial match
            return stance2
        else:
            return None
        
        
