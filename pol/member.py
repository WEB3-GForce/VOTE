from printable_object import PrintableObject

"""
File Generated by Lisp2Python Translator
"""

class Member(PrintableObject):

    """"
    A class that represnts a particular member.
    """

    def __init__(self, **entries):

        """
        Constructs a new Member object.

        name            -- name of member
        fname           -- first name symbol for member
        lname           -- last name symbol for member
        english_short   -- short version of name
        notes           -- list of remarks
        gender          -- male or female
        votes           -- past voting record -- list of bill/vote pairs
        new_votes       -- test votes -- list of bill/vote pairs
        stances         -- stances extracted from votes
        issues          -- list of issues of importance to this member
        credo           -- list of stances personal to this member
        groups          -- list of groups of importance to this member
        relations       -- list of relations with groups
        pro_rel_stances -- list of stances inferred from pro relationships
        con_rel_stances -- list of stances inferred from con relationships
        stance_sort_key -- Symbol LOYALTY or EQUITY used for setting priorities
        district        -- name of district from which elected
        term_start      -- year elected to Congress
        term_end        -- year left Congress
        party           -- political party affiliation
        committees      -- list of committees on which member serves

        return          -- returns nothing
        """
        self.name = None
        self.fname = None
        self.lname = None
        self.english_short = None
        self.notes = None
        self.gender = None
        self.votes = None
        self.new_votes = None
        self.stances = None
        self.issues = None
        self.credo = None
        self.groups = None
        self.relations = None
        self.pro_rel_stances = None
        self.con_rel_stances = None
        self.stance_sort_key = None
        self.district = None
        self.term_start = None
        self.term_end = None
        self.party = None
        self.committees = None
        self.__dict__.update(entries)

    def extract_voting_stances():
        print "Extracting stances based on voting record of %s" % self.name

        self.stances = []
        for vote in member.votes:
            result = self.extract_vote_stance(vote)
            self.stances.append(result)


    def extract_vote_stance(vote):
        bill_id = vote[0]
        for_or_agn = vote[1]

        bill = DBBill.GetById(bill_id)

        if for_or_agn == "FOR":
            return bill.stance_for
        elif for_or_agn == "AGN":
            return bill.stance_agn
        else:
            print "ERROR in EXTRACT STANCE: Expected FOR or AGN. Not %s" % for_or_agn


    def get_relations_stances():

        results = []
        for relationid in self.relations:
            relation = DBRelation.getById(relationid)
            groupid = relation.group

            group = DBGroup.getById(groupid)

            for stanceid in group.stances:
                stance = DBRelation.getById(stanceid)
                stance.relation = relation
                results.append(stance)

        pro_stance = lambda stance : "PRO" == stance.relation.side
        con_stance = lambda stance : "CON" == stance.relation.side
        member.pro_rel_stances = filter(pro_stance, stances)
        member.con_rel_stances = filter(con_stance, stances)
